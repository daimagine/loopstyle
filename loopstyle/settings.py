"""
Django settings for loopstyle project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import mongoengine

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$(z(!#l^v!tke7%q@85=k_ec5%-+8#^d7k^5u^8lrx@_foppbh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG_MODE_ON', 'True') == 'True'

# http://stackoverflow.com/questions/19875789/django-gives-bad-request-400-when-debug-false
# Cannot set this at the moment because of ELB health check
ALLOWED_HOSTS = ['*']

# Emails
SERVER_EMAIL = 'kenneth@freshr.co'
ADMINS = (('Kenneth', 'kenneth@freshr.co'), )
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(levelname)s %(asctime)s %(module)s %(process)d '
                       '%(thread)d %(message)s')
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'api': {
            'format': ('[%(requestmethod)s][%(responsestatus)s][%(user)s]'
                       '[%(requestpath)s][%(levelname)s] %(message)s')
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'filters': [],
        },
        'console': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'enhanced_console': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'class': 'logging.StreamHandler',
            'formatter': 'api',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'formatter': 'testing',
        },
        # 404 etc. goes here
        'django.request': {
            'handlers': ['console', ],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
        'loopstyle': {
            'handlers': ['enhanced_console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
    },
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = '172.17.42.1'

# Application definition

INSTALLED_APPS = (
    'grappelli',  # this must be placed before django.contrib.admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_nose',
    'storages',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_mongoengine',
    
    'core',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'loopstyle.middlewares.AdminTimezoneMiddleware',
)

ROOT_URLCONF = 'loopstyle.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.request',
)

WSGI_APPLICATION = 'loopstyle.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('PGDB_NAME', 'loopstyle'),
        'USER': os.environ.get('PGDB_USER', 'postgres'),
        'PASSWORD': os.environ.get('PGDB_PASSWORD', 'postgres'),
        'HOST': os.environ.get('PGDB_HOST', 'localhost'),
        'PORT': os.environ.get('PGDB_PORT', 5432),
        'ATOMIC_REQUESTS': True,
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://{}:{}/{}'.format(
            os.environ.get('REDIS_HOST', 'redis'),
            os.environ.get('REDIS_PORT', '6379'),
            os.environ.get('REDIS_DBINDEX', '1')),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'http://i.loopstyle.com/media/'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'PAGE_SIZE': 20
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_DIR = (
    os.path.join(BASE_DIR, 'static')
)


TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

MONGODB_USER = 'loopstyle'
MONGODB_PASSWD = 'l00pstyl3'
MONGODB_HOST = 'ds049624.mongolab.com'
MONGODB_PORT = '49624'
MONGODB_NAME = 'loopstyle'
MONGODB_DATABASE_HOST = 'mongodb://{}:{}@{}:{}/{}'.format(
    MONGODB_USER, 
    MONGODB_PASSWD, 
    MONGODB_HOST, 
    MONGODB_PORT,
    MONGODB_NAME
)

mongoengine.connect(MONGODB_NAME, host=MONGODB_DATABASE_HOST)
